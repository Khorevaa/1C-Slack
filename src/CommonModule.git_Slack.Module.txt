// 1С:Slack. Send data into Slack in real-time.

// Copyright © 2014 Петр Базелюк

// Данная лицензия разрешает лицам, получившим копию данного программного 
// обеспечения и сопутствующей документации (в дальнейшем именуемыми «Программное 
// Обеспечение»), безвозмездно использовать Программное Обеспечение без ограничений, 
// включая неограниченное право на использование, копирование, изменение, 
// добавление, публикацию, распространение, сублицензирование и/или продажу копий 
// Программного Обеспечения, также как и лицам, которым предоставляется данное 
// Программное Обеспечение, при соблюдении следующих условий:

// Указанное выше уведомление об авторском праве и данные условия должны быть 
// включены во все копии или значимые части данного Программного Обеспечения.

// ДАННОЕ ПРОГРАММНОЕ ОБЕСПЕЧЕНИЕ ПРЕДОСТАВЛЯЕТСЯ «КАК ЕСТЬ», БЕЗ КАКИХ-ЛИБО 
// ГАРАНТИЙ, ЯВНО ВЫРАЖЕННЫХ ИЛИ ПОДРАЗУМЕВАЕМЫХ, ВКЛЮЧАЯ, НО НЕ ОГРАНИЧИВАЯСЬ 
// ГАРАНТИЯМИ ТОВАРНОЙ ПРИГОДНОСТИ, СООТВЕТСТВИЯ ПО ЕГО КОНКРЕТНОМУ НАЗНАЧЕНИЮ И 
// ОТСУТСТВИЯ НАРУШЕНИЙ ПРАВ. НИ В КАКОМ СЛУЧАЕ АВТОРЫ ИЛИ ПРАВООБЛАДАТЕЛИ НЕ НЕСУТ 
// ОТВЕТСТВЕННОСТИ ПО ИСКАМ О ВОЗМЕЩЕНИИ УЩЕРБА, УБЫТКОВ ИЛИ ДРУГИХ ТРЕБОВАНИЙ ПО 
// ДЕЙСТВУЮЩИМ КОНТРАКТАМ, ДЕЛИКТАМ ИЛИ ИНОМУ, ВОЗНИКШИМ ИЗ, ИМЕЮЩИМ ПРИЧИНОЙ ИЛИ 
// СВЯЗАННЫМ С ПРОГРАММНЫМ ОБЕСПЕЧЕНИЕМ ИЛИ ИСПОЛЬЗОВАНИЕМ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ 
// ИЛИ ИНЫМИ ДЕЙСТВИЯМИ С ПРОГРАММНЫМ ОБЕСПЕЧЕНИЕМ.

// Петр Базелюк
// e-mail: pbazelyuk@ktc-ua.com
// Версия: 1.0.0.1

// Требования:
// 	Минимальная версия платформы 1С - 8.3

// Методы:
//	ОтправитьДанные – Отправляет данные в сервис slack;


// Процедура отправляет данные в сервисе slack
// 	
// Параметры:
// 	Сервер 			- Строка 	- Хост сервера, с которым осуществляется соединение	
//  Токен			- Строка 	- Уникальный токен для интеграции с сервисом. (Integrations -> Incoming WebHooks -> Add Incoming WebHook -> Token)
//  СтруктураДанных - Структура	- Структура в которой описаны поля JSON
//		* text - Строка - Строка текста (необязательный) 
//			Пример:
//				"Это строка текста в канале /n А это другая строка в канале, с новой строки"
//				"Случилось важное событие! <https://alert-system.com/alerts/1234|Нажмите здесь> для подробной информации!""
//      * username - Строка - Отображаемое имя бота (необязательный)
//			Пример:
//				"Новое имя пользователя"
//				"Мастре Йода"
//		* icon_url - Строка - Отображаемая картинка бота (необязательный)
//			Пример:
//				"https://slack.com/img/icons/app-57.png"
//		* icon_emoji - Строка - Отображаемая картинка бота (необязательный)
//			Пример:
//				":ghost:"
//    	* channel - Строка - Канал\пользователь в который\которому нужно доставить сообщение (необязательный)
//			Пример:		
//          	"#other-channel"
//              "@username"
//		* attachments - Массив - Содержит структуры со свойствами (необязательный):
//			** fallback - Строка - Описание прикрепления (обязательный)
//				Пример:
//					"Прайс-лист"
//					"New open task [Urgent]: <http://url_to_task|Test out Slack message attachments>"
//          ** text - Строка - Дополнительный текст, который должен появиться в прикреплении (необязательный)
//				Пример:
//             		"Дополнительный текст"	
//			** pretext - Строка - Дополнительный текст, который появляется выше, над форматированными данными (необязательный)
//				Пример:
//             		"Дополнительный текст"
//					"New open task [Urgent]: <http://url_to_task|Test out Slack message attachments>"
//			** color - Строка - Цвет полосы (необязательный)
//              Пример:
//					"#36a64f"
//					"danger"
//			** fields - Массив - Содержит структуры со свойствами (необязательный):
//				*** title - Строка - Заголовок поля (обязательный)
//					Пример:
//                  	"Заметки"
//				*** value - Строка - Текст значения поля. Может содержать стандартную разметку сообщения и должны быть экранированы, как обычно. 
//									Текст может быть многострочным. (необязательный)
//					Пример:
//                  	"Это намного проще, чем кажется"
//				*** short - Булево - Флаг обозначает, что value короткое настолько чтобы рядом отобразить другие значения (необязательный)
//					Пример:
//						Ложь
//                      Истина
//	ОбъектМетаданных 	- <Объект метаданных>	- Объект метаданных, к которому относится событие
//	Данные				- Произвольный			- Данные, с которыми связано событие
//	Комментарий			- Строка				- Произвольная строка комментария к событию
//
Процедура ОтправитьДанные(Сервер, Токен, Знач СтруктураДанных, ОбъектМетаданных = Неопределено, Данные = Неопределено, Комментарий = Неопределено) Экспорт
	
	ЗаписьЖурналаРегистрации(НСтр("ru='Начало. Отправка сообщения в slack'"),
								УровеньЖурналаРегистрации.Информация, 
								ОбъектМетаданных,
								Данные,
								Комментарий);
								
	ВыполнитьПроверкуСтруктурыДанных(СтруктураДанных);							
	
	ДанныеJSON = git_JSON.ЗаписатьJSON(СтруктураДанных);
	ДанныеEncoded = КодироватьСтроку(ДанныеJSON, СпособКодированияСтроки.КодировкаURL, КодировкаТекста.UTF8);
	PayloadEncoded = "payload=%ДанныеEncoded%";
	PayloadEncoded = СтрЗаменить(PayloadEncoded, "%ДанныеEncoded%", ДанныеEncoded);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	
	СтрокаСоединения = "/services/hooks/incoming-webhook?token=%Токен%";
	СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "%Токен%", Токен);

	HTTPЗапрос = Новый HTTPЗапрос(СтрокаСоединения, Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(PayloadEncoded, "Windows-1251");
	
	ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows, Новый СертификатыУдостоверяющихЦентровWindows);
	HTTPСоединение = Новый HTTPСоединение(Сервер,,,,,, ЗащищенноеСоединение);
	
	Попытка 
		HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru='Ошибка. Отправка сообщения в slack'"),
								УровеньЖурналаРегистрации.Ошибка, 
								ОбъектМетаданных,
								Данные,
								ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ЗаписьЖурналаРегистрации(НСтр("ru='Успешное завершение. Отправка сообщения в slack'"),
								УровеньЖурналаРегистрации.Информация, 
								ОбъектМетаданных,
								Данные,
								Комментарий);
	
КонецПроцедуры // ОтправитьДанные()

// Проверяет корректность переданой структуры данных 
//
// Параметры:
// 	СтруктураДанных - Структура - Структура в которой описаны поля JSON
//
Процедура ВыполнитьПроверкуСтруктурыДанных(СтруктураДанных, ТипСтруктуры = Неопределено)
	
	ПроверитьТипЗначенияСтруктуры(СтруктураДанных);
		
	Для каждого КлючИЗначение Из СтруктураДанных Цикл
		
		Если ЗначениеЗаполнено(КлючИЗначение.Значение) = Ложь Тогда
			СтруктураДанных.Удалить(КлючИЗначение.Ключ);
			Продолжить;
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = "attachments" ИЛИ КлючИЗначение.Ключ = "fields" Тогда
			
			ПроверитьТипЗначения(КлючИЗначение, Тип("Массив"));
			
			Для каждого ЭлементМассива Из КлючИЗначение.Значение Цикл
				ВыполнитьПроверкуСтруктурыДанных(ЭлементМассива, КлючИЗначение.Ключ);
			КонецЦикла; 
				
			Продолжить;
			
		КонецЕсли;
		
		Если КлючИЗначение.Ключ <> "short" Тогда
			ПроверитьТипЗначения(КлючИЗначение, Тип("Строка"));
		КонецЕсли;
		
	КонецЦикла; 
	
	Если ТипСтруктуры = "attachments" Тогда
		Если СтруктураДанных.Свойство("fallback") = Ложь Тогда
			ВызватьИсключение НСтр("ru='Структура ""attachments"" не содержит обязательное поле ""fallback""'");			
		КонецЕсли;
	КонецЕсли;

	Если ТипСтруктуры = "fields" Тогда
		Если СтруктураДанных.Свойство("title") = Ложь Тогда
			ВызватьИсключение НСтр("ru='Структура ""fields"" не содержит обязательное поле ""title""'");			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьПроверкуСтруктурыДанных() 

Процедура ПроверитьТипЗначения(КлючИЗначение, Тип)
	
	Если ТипЗнч(КлючИЗначение.Значение) <> Тип Тогда
		ОписаниеОшибки = НСтр("ru='Структура описания полей JSON содержит ошибочное значение в поле: %Ключ%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Ключ%", КлючИЗначение.Ключ);
		ВызватьИсключение ОписаниеОшибки;			
	КонецЕсли;		
	
КонецПроцедуры // ПроверитьТипЗначения()

Процедура ПроверитьТипЗначенияСтруктуры(СтруктураДанных)
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		ВызватьИсключение НСтр("ru='Переданные данные не являются структурой описания полей JSON'");	
	КонецЕсли;
	
КонецПроцедуры // ПроверитьТипЗначенияСтруктуры()



Функция ПолучитьПустуюСтруктуруДанных() Экспорт
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("text");
	СтруктураДанных.Вставить("username");
	СтруктураДанных.Вставить("icon_url");
	СтруктураДанных.Вставить("icon_emoji");
	СтруктураДанных.Вставить("channel");
	СтруктураДанных.Вставить("attachments");
	Возврат СтруктураДанных;
	
КонецФункции // ПолучитьПустуюСтруктуруДанных()

Функция ПолучитьСтруктуруПрикреплений() Экспорт
	
	СтруктураПрикреплений = Новый Структура;
	СтруктураПрикреплений.Вставить("fallback");
	СтруктураПрикреплений.Вставить("text");
	СтруктураПрикреплений.Вставить("pretext");
	СтруктураПрикреплений.Вставить("color");
	СтруктураПрикреплений.Вставить("fields");
	Возврат СтруктураПрикреплений;
	
КонецФункции // ПолучитьСтруктуруПрикреплений()

Функция ПолучитьСтруктуруПолей() Экспорт
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("title");
	СтруктураПолей.Вставить("value");
	СтруктураПолей.Вставить("short");
	Возврат СтруктураПолей;
	
КонецФункции // ПолучитьСтруктуруПолей()